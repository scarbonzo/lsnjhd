// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace lsnjhdapi.Migrations
{
    [DbContext(typeof(HdSqlContext))]
    [Migration("20181002195240_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-preview2-35157")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<string>("Message");

                    b.Property<Guid?>("TaskId");

                    b.Property<Guid?>("TicketId");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("TicketId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Note", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<Guid?>("CreatedById");

                    b.Property<string>("Message");

                    b.Property<Guid?>("TicketId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("TicketId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("Office", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<Guid?>("ProgramId");

                    b.HasKey("Id");

                    b.HasIndex("ProgramId");

                    b.ToTable("Offices");
                });

            modelBuilder.Entity("Program", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Programs");
                });

            modelBuilder.Entity("Severity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Severities");
                });

            modelBuilder.Entity("Status", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("Task", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Complete");

                    b.Property<DateTime>("Completed");

                    b.Property<Guid?>("CompletedById");

                    b.Property<DateTime>("Created");

                    b.Property<Guid?>("CreatedById");

                    b.Property<string>("Name");

                    b.Property<Guid?>("TicketTemplateId");

                    b.Property<DateTime>("Updated");

                    b.Property<Guid?>("UpdatedById");

                    b.HasKey("Id");

                    b.HasIndex("CompletedById");

                    b.HasIndex("CreatedById");

                    b.HasIndex("TicketTemplateId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Closed");

                    b.Property<Guid?>("ClosedById");

                    b.Property<DateTime>("Created");

                    b.Property<Guid?>("CreatedById");

                    b.Property<Guid?>("EndUserId");

                    b.Property<Guid?>("OfficeId");

                    b.Property<Guid?>("ProgramId");

                    b.Property<Guid?>("SeverityId");

                    b.Property<Guid?>("StatusId");

                    b.Property<string>("Summary");

                    b.Property<Guid?>("TicketTypeId");

                    b.Property<string>("Title");

                    b.Property<DateTime>("Updated");

                    b.Property<Guid?>("UpdatedById");

                    b.HasKey("Id");

                    b.HasIndex("ClosedById");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EndUserId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("ProgramId");

                    b.HasIndex("SeverityId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TicketTypeId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("TicketTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("TicketTemplates");
                });

            modelBuilder.Entity("TicketType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<Guid?>("TemplateId");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.ToTable("TicketTypes");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("Extension");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<Guid?>("OfficeId");

                    b.Property<Guid?>("ProgramId");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.HasIndex("ProgramId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Event", b =>
                {
                    b.HasOne("Task")
                        .WithMany("AuditTrail")
                        .HasForeignKey("TaskId");

                    b.HasOne("Ticket")
                        .WithMany("AuditTrail")
                        .HasForeignKey("TicketId");
                });

            modelBuilder.Entity("Note", b =>
                {
                    b.HasOne("User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("Ticket")
                        .WithMany("Notes")
                        .HasForeignKey("TicketId");
                });

            modelBuilder.Entity("Office", b =>
                {
                    b.HasOne("Program", "Program")
                        .WithMany()
                        .HasForeignKey("ProgramId");
                });

            modelBuilder.Entity("Task", b =>
                {
                    b.HasOne("User", "CompletedBy")
                        .WithMany()
                        .HasForeignKey("CompletedById");

                    b.HasOne("User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("TicketTemplate")
                        .WithMany("Tasks")
                        .HasForeignKey("TicketTemplateId");

                    b.HasOne("User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("Ticket", b =>
                {
                    b.HasOne("User", "ClosedBy")
                        .WithMany()
                        .HasForeignKey("ClosedById");

                    b.HasOne("User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("User", "EndUser")
                        .WithMany()
                        .HasForeignKey("EndUserId");

                    b.HasOne("Office", "Office")
                        .WithMany()
                        .HasForeignKey("OfficeId");

                    b.HasOne("Program", "Program")
                        .WithMany()
                        .HasForeignKey("ProgramId");

                    b.HasOne("Severity", "Severity")
                        .WithMany()
                        .HasForeignKey("SeverityId");

                    b.HasOne("Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.HasOne("TicketType", "TicketType")
                        .WithMany()
                        .HasForeignKey("TicketTypeId");

                    b.HasOne("User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("TicketType", b =>
                {
                    b.HasOne("TicketTemplate", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.HasOne("Office", "Office")
                        .WithMany()
                        .HasForeignKey("OfficeId");

                    b.HasOne("Program", "Program")
                        .WithMany()
                        .HasForeignKey("ProgramId");
                });
#pragma warning restore 612, 618
        }
    }
}
